usage of loaders inside webpack.config.js
{
    "entry" : ...
    "output: {
        "filename" :...
        "path" : ...
    },

    // loaders example
    module: {
        rules: [
			{
				test: /\.css$/i,
				use: [ 'style-loader', 'css-loader' ]
			}
		]
    }
}

// loaders that can be used for

for Styling  :
    "css-loader": "^3.4.0",
		"node-sass": "^4.13.0",
		"sass-loader": "^8.0.0",
		"style-loader": "^1.0.2",


for cache bursting : filename.[contentHash].XX
        output: {
		filename: 'app.bundle.[contentHash].js',
		path: path.resolve(__dirname, 'dist')
	},

for HTML:
    HtmlWebpackPlugin  - npm install --save-dev html-webpack-plugin
    //plugins
	plugins: [
		new HtmlWebpackPlugin({
			template: './index.html'
		})
	]

for production and dev version merge :
webpack.common.js
webpack.dev.js
webpack.prod.js
    npm i -D webpack-merge
    npm i -D webpack-dev-server
webpack dev server


HTML LOADER and FILE LOADER

clean webpack plugin

split entry in webpack.common.js 

use splitchunks in optimization part provided by webpack 4

BundleAnalyzerPlugin

Extract DOM injected css to seprate file with mini-css-extract-plugin

MiniCssExtractPlugin

optimize css assets plugin

tailwind with purging added using - @fullhalfman cs
https://github.com/webpack-contrib/terser-webpack-plugin

offline support added - offline webpack plugin //  not done

added inlince-critical-webpack plugin and add new webpack config to generate the critical patch css , since this depends on headless chrome not recommended for ci/cd pipeline

add doeenv webpack plugin 

finally miniize html
new HtmlWebpackPlugin({
			template: './src/index.html',
			minify: {
				removeAttributeQuotes: true,
				removeComments: true,
				collapseWhitespace: true
			}
		})

		
ADDED BABEl TRANSPILER into this webpack

AFTER ADDING BABEL-loADER , Babel-polyfill we saw a huge icreasse in the file size of vendor.js , need to adress this 

Try to add Babel 7 into webpack instaed of current babel6 , with new plugin like - Proposal Optional Chaining

Also Axios Http CLient lib is taking too much of size , may find an alternative to this.
see if u can enable gzip, brotil encoding compression using webpack dev-server or create a node server which supportr gzip (done)
	"dev": "webpack-dev-server --config webpack.dev.js --compress true --open",

=====================
Broti compression algorith via webpack can be best to serve gzip or brotli resources and place it in your server and your server extra load of comressing thing on the fly get reduced and based on the browser request one can serve brotli if support or else fall back to gzip
	https://www.keycdn.com/blog/brotli-with-webpack
	https://www.npmjs.com/package/brotli-gzip-webpack-plugin
	https://www.codementor.io/@rachitgulati/express-brotli-webpack-uarb1of3j
	https://medium.com/groww-engineering/enable-brotli-compression-in-webpack-with-fallback-to-gzip-397a57cf9fc6
	https://medium.com/@selvaganesh93/how-to-serve-webpack-gzipped-file-in-production-using-nginx-692eadbb9f1c
		browseer reuest heards might be as follows :
			Accept: */*
			Accept-Encoding: gzip, deflate, br
=====================

====== Code Spliting can be improved ======

https://medium.com/hackernoon/the-100-correct-way-to-split-your-chunks-with-webpack-f8a9df5b7758
https://medium.com/@poshakajay/heres-how-i-reduced-my-bundle-size-by-90-2e14c8a11c11
https://developers.google.com/web/fundamentals/performance/optimizing-javascript/code-splitting
https://www.freecodecamp.org/news/learn-webpack-by-example-simple-code-splitting-in-a-vanilla-javascript-app-b366798336a4/

======== =======

==== Image Optimization ====
 Lazyloading images after page loads == [DONE]
http://blog.dynamicdrive.com/5-brilliant-ways-to-lazy-load-images-for-faster-page-loads/
https://github.com/verlok/lazyload
https://thinker3197.github.io/progressively/
image processing service
web-p support - https://www.freecodecamp.org/news/make-your-website-load-lightning-fast-with-webp-images-cf55c98ac0a2/
image processing service
image kit integration for blur iage and dynamic image uisng smthng like lamda function 
https://www.keycdn.com/blog/responsive-images
npm install url-loader
imagemin
imagemin-webp 
https://www.andreaverlicchi.eu/lazy-load-responsive-images-in-2019-srcset-sizes-more/
https://www.imgix.com/
https://www.cloudimage.io/
https://imagekit.io/blog/lazy-loading-images-complete-guide/
https://imagekit.io/blog/network-based-image-optimization-and-role-of-service-workers/
https://www.npmjs.com/package/image-webpack-loader
https://iamakulov.com/notes/optimize-images-webpack/
====== 

=== image kit optimization [done] ==
// for actual image with blur as a placeholder 
https://ik.imagekit.io/vjmibljw7/tr:w-700,f-webp,q-10,bl-50/shiv-prasad-cQcBeKdpsPE-unsplash_csTiq4HOW.jpg
https://imagekit.io/blog/network-based-image-optimization-and-role-of-service-workers/
// or as a image backgrund color to take as primary and scale it up to match the color of image
https://ik.imagekit.io/vjmibljw7/tr:w-1,h-1:w-400,h-300,f-webp,q-10,bl-50/shiv-prasad-cQcBeKdpsPE-unsplash_csTiq4HOW.jpg
https://imagekit.io/blog/lazy-loading-images-complete-guide/
https://imagekit.io/blog/smart-crop-deliver-perfect-responsive-images/
https://imagekit.io/blog/lighter-automatic-responsive-images-client-hints/
=====

=== 
Better Way of Handling Polyfiils
pollyfill.io
https://itnext.io/lazy-loading-polyfills-4b85c4951e73
https://medium.com/hackernoon/polyfills-everything-you-ever-wanted-to-know-or-maybe-a-bit-less-7c8de164e423


===

===
POSTCSS CONFIGS WITH TAILWIND SETUP
======

== minification of image can be considered ==

==== =====

== Font loader can be injected ==
https://chriscourses.com/blog/loading-fonts-webpack
https://survivejs.com/webpack/loading/fonts/
https://google-webfonts-helper.herokuapp.com/
https://github.com/typekit/webfontloader
https://github.com/bramstein/fontfaceobserver

// best =---> https://www.youtube.com/watch?v=s-G1m23Emlk
	https://github.com/chhib/dt-font-loading
	https://survivejs.com/webpack/loading/fonts/
	https://google-webfonts-helper.herokuapp.com/
/// =========>
 
=========


== No script implementation ===
<noscript>
        <p>any kind of content you want to be unveiled</p>
    </noscript>
================================

=====
url-loader configuration for webpack along with file loader
====

===
converst svg to font-icon svg version
ADDED - svg-url-loader ( url encoding)
https://survivejs.com/webpack/loading/fonts/
https://www.npmjs.com/package/icon-font-generator
https://www.npmjs.com/package/icon-font-loader
https://github.com/itgalaxy/webfont-webpack-plugin
https://www.npmjs.com/package/fontmin-webpack
====

== tree shaking / purging of css ==
https://github.com/FullHuman/purgecss-webpack-plugin
==== ===

====
extract critical css to head 
===

=====
minify js
https://github.com/webpack-contrib/terser-webpack-plugin
====
===
https://hackernoon.com/a-tale-of-webpack-4-and-how-to-finally-configure-it-in-the-right-way-4e94c8e7e5c1
https://www.npmjs.com/package/webpack-md5-hash
===

old min css = maincfc45d940750b1dd6bd6.min
old main.js file = main0834faad4aa19036c348.min
npm.axios40597d7a8f77d6e12018.min
hello.2fa2ff7d04ec88af6ccc5b0c66619e38


AUTO PREFIXES FOR SASS
https://medium.com/@realfrancisyan/scss-autoprefixer-with-webpack-9f8456ae751b
https://stackoverflow.com/questions/38010421/css-autoprefixer-with-webpack

=======
https://survivejs.com/webpack/introduction/
======

===
sepearate .babelrc and post.config.js 
===

======================================-============================ App shell / PRPLL Pattern / Service workers=======
https://www.npmjs.com/package/preload-webpack-plugin
https://web.dev/uses-long-cache-ttl/?utm_source=lighthouse&utm_medium=devtools

https://web.dev/render-blocking-resources/?utm_source=lighthouse&utm_medium=devtools
https://web.dev/defer-non-critical-css/

// IMPORTANT
https://morioh.com/p/e941b22aa736
https://github.com/NekR/offline-plugin
https://www.smashingmagazine.com/2019/06/pwa-webpack-workbox/
https://codeburst.io/progressive-web-app-with-webpack-198b073f6c74
npm i sw-precache-webpack-plugin webpack-pwa-manifest -D
https://developers.google.com/web/fundamentals/architecture/app-shell

ADDED ==> const HtmlCriticalWebpackPlugin = require("html-critical-webpack-plugin");
https://www.npmjs.com/package/critters-webpack-plugin




== Micro Services ===
https://single-spa.js.org/
https://www.youtube.com/watch?v=vjjcuIxqIzY&list=PLLUD8RtHvsAOhtHnyGx57EYXoaNsxGrTU&index=4

== SPA ==
https://viblo.asia/p/quick-webpack-set-up-for-single-page-applications-aWj53Xk8K6m



==== Tree shaking === 
https://github.com/babel/babel-loader/issues/521
https://wanago.io/2018/08/13/webpack-4-course-part-seven-decreasing-the-bundle-size-with-tree-shaking/


== security  for CSP ---
nounce == > __webpack_nonce__ = 'c29tZSBjb29sIHN0cmluZyB3aWxsIHBvcCB1cCAxMjM='; in entry file 
https://excess-xss.com/


== babel plugin for dev ==
https://github.com/MatAtBread/fast-async
@babel/plugin-transform-arrow-functions"]


https://medium.com/walmartlabs/infinite-scrolling-the-right-way-11b098a08815

WebFontPlugin - convert svg to icons

i18n support 
https://survivejs.com/webpack/building/code-splitting/


[hash] test ---> hello.2fa2ff7d04ec88af6ccc5b0c66619e38.jpg  
mainbb062850b9e116b5f675.min.css
vendors~main8000124a0f19992e82c8.min.js  vendors~main8000124a0f19992e82c8.min
main8c6c3d8b96e8f608f3bf.min.js


=====
https://codeburst.io/process-env-what-it-is-and-why-when-how-to-use-it-effectively-505d0b2831e7
https://dev.to/deammer/loading-environment-variables-in-js-apps-1p7p

https://unused-css.com/blog/are-service-workers-faster-than-the-browser-cache/


==== use chaing of loaders with option example ====

const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = {
  plugins: [new MiniCssExtractPlugin()],
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: [
          {
            loader: MiniCssExtractPlugin.loader,
            options: {
              esModule: true,
            },
          },
          'css-loader',
        ],
      },
    ],
  },
};

=============