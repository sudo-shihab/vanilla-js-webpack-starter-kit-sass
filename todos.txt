usage of loaders inside webpack.config.js
{
    "entry" : ...
    "output: {
        "filename" :...
        "path" : ...
    },

    // loaders example
    module: {
        rules: [
			{
				test: /\.css$/i,
				use: [ 'style-loader', 'css-loader' ]
			}
		]
    }
}

// loaders that can be used for

for Styling  :
    "css-loader": "^3.4.0",
		"node-sass": "^4.13.0",
		"sass-loader": "^8.0.0",
		"style-loader": "^1.0.2",


for cache bursting : filename.[contentHash].XX
        output: {
		filename: 'app.bundle.[contentHash].js',
		path: path.resolve(__dirname, 'dist')
	},

for HTML:
    HtmlWebpackPlugin  - npm install --save-dev html-webpack-plugin
    //plugins
	plugins: [
		new HtmlWebpackPlugin({
			template: './index.html'
		})
	]

for production and dev version merge :
webpack.common.js
webpack.dev.js
webpack.prod.js
    npm i -D webpack-merge
    npm i -D webpack-dev-server
webpack dev server


HTML LOADER and FILE LOADER

clean webpack plugin

split entry in webpack.common.js 

use splitchunks in optimization part provided by webpack 4

BundleAnalyzerPlugin

Extract DOM injected css to seprate file with mini-css-extract-plugin

MiniCssExtractPlugin


finally miniize html
new HtmlWebpackPlugin({
			template: './src/index.html',
			minify: {
				removeAttributeQuotes: true,
				removeComments: true,
				collapseWhitespace: true
			}
		})

		
ADDED BABEl TRANSPILER into this webpack

AFTER ADDING BABEL-loADER , Babel-polyfill we saw a huge icreasse in the file size of vendor.js , need to adress this 

Try to add Babel 7 into webpack instaed of current babel6 , with new plugin like - Proposal Optional Chaining

Also Axios Http CLient lib is taking too much of size , may find an alternative to this.
see if u can enable gzip, brotil encoding compression using webpack dev-server or create a node server which supportr gzip (done)
	"dev": "webpack-dev-server --config webpack.dev.js --compress true --open",

=====================
Broti compression algorith via webpack can be best to serve gzip or brotli resources and place it in your server and your server extra load of comressing thing on the fly get reduced and based on the browser request one can serve brotli if support or else fall back to gzip
	https://www.keycdn.com/blog/brotli-with-webpack
	https://www.npmjs.com/package/brotli-gzip-webpack-plugin
	https://www.codementor.io/@rachitgulati/express-brotli-webpack-uarb1of3j
	https://medium.com/groww-engineering/enable-brotli-compression-in-webpack-with-fallback-to-gzip-397a57cf9fc6
	https://medium.com/@selvaganesh93/how-to-serve-webpack-gzipped-file-in-production-using-nginx-692eadbb9f1c
		browseer reuest heards might be as follows :
			Accept: */*
			Accept-Encoding: gzip, deflate, br
=====================

====== Code Spliting can be improved ======

https://medium.com/hackernoon/the-100-correct-way-to-split-your-chunks-with-webpack-f8a9df5b7758
https://medium.com/@poshakajay/heres-how-i-reduced-my-bundle-size-by-90-2e14c8a11c11
https://developers.google.com/web/fundamentals/performance/optimizing-javascript/code-splitting
https://www.freecodecamp.org/news/learn-webpack-by-example-simple-code-splitting-in-a-vanilla-javascript-app-b366798336a4/

======== =======

==== Image Optimization ====
 Lazyloading images after page loads == [DONE]
http://blog.dynamicdrive.com/5-brilliant-ways-to-lazy-load-images-for-faster-page-loads/
https://github.com/verlok/lazyload
https://thinker3197.github.io/progressively/
image processing service
web-p support - https://www.freecodecamp.org/news/make-your-website-load-lightning-fast-with-webp-images-cf55c98ac0a2/
image processing service
image kit integration for blur iage and dynamic image uisng smthng like lamda function 
https://www.keycdn.com/blog/responsive-images
npm install url-loader
imagemin
imagemin-webp 
https://www.andreaverlicchi.eu/lazy-load-responsive-images-in-2019-srcset-sizes-more/
https://www.imgix.com/
https://www.cloudimage.io/
https://imagekit.io/blog/lazy-loading-images-complete-guide/
https://imagekit.io/blog/network-based-image-optimization-and-role-of-service-workers/
====== 

=== image kit optimization [done] ==
// for actual image with blur as a placeholder 
https://ik.imagekit.io/vjmibljw7/tr:w-700,f-webp,q-10,bl-50/shiv-prasad-cQcBeKdpsPE-unsplash_csTiq4HOW.jpg
https://imagekit.io/blog/network-based-image-optimization-and-role-of-service-workers/
// or as a image backgrund color to take as primary and scale it up to match the color of image
https://ik.imagekit.io/vjmibljw7/tr:w-1,h-1:w-400,h-300,f-webp,q-10,bl-50/shiv-prasad-cQcBeKdpsPE-unsplash_csTiq4HOW.jpg
https://imagekit.io/blog/lazy-loading-images-complete-guide/
=====

=== 
Better Way of Handling Polyfiils
pollyfill.io
https://itnext.io/lazy-loading-polyfills-4b85c4951e73
https://medium.com/hackernoon/polyfills-everything-you-ever-wanted-to-know-or-maybe-a-bit-less-7c8de164e423


===

===
POSTCSS CONFIGS WITH TAILWIND SETUP
======

== minification of image can be considered ==

==== =====

== Font loader can be injected ==
https://chriscourses.com/blog/loading-fonts-webpack
=========


== No script implementation ===
<noscript>
        <p>any kind of content you want to be unveiled</p>
    </noscript>
================================

=====
url-loader configuration for webpack along with file loader
====

===
converst svg to font-icon svg version
https://www.npmjs.com/package/icon-font-generator
https://www.npmjs.com/package/icon-font-loader
https://github.com/itgalaxy/webfont-webpack-plugin
====